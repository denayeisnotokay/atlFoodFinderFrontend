@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
    .feather-lg {
        @apply size-8 stroke-current stroke-2 fill-none transition-transform;
        stroke-linecap: round;
        stroke-linejoin: round;
    }

    .feather-md {
        @apply size-6 stroke-current stroke-2 fill-none transition-transform;
        stroke-linecap: round;
        stroke-linejoin: round;
    }

    .feather-sm {
        @apply size-4 stroke-current stroke-2 fill-none transition-transform;
        stroke-linecap: round;
        stroke-linejoin: round;
    }

    .input {
        @apply transition-colors;
        @apply bg-base-200;
        @apply flex items-center gap-2;
    }

    :not(details) > .input {
        @apply hover:bg-neutral;
        @apply focus-within:bg-base-300;
    }

    details > .input {
        @apply hover:bg-neutral;
        @apply select-none;
    }

    details[open] .input {
        @apply hover:bg-neutral !important;
        @apply bg-base-300 !important;
    }

    .scroll-shadow {
        mask-image: linear-gradient(#000,#000,transparent 0,#000 40px,#000 calc(100% - 40px),transparent);
    }

    .scroll-shadow.bottom {
        mask-image: linear-gradient(0deg,#000 calc(100% - 40px),transparent);
    }

    .scroll-shadow.top {
        mask-image: linear-gradient(180deg,#000 calc(100% - 40px),transparent);
    }

    .collapse {
        transition: flex-grow 0.25s ease, min-height 0.25s ease;
        grid-template-rows: 3.75rem 0fr;
        flex-grow: 0;
        flex-shrink: 0;
        min-height: 0;
    }

    .collapse:not(.collapse-close):has(> input[type="checkbox"]:checked), .collapse:not(.collapse-close):has(> input[type="radio"]:checked) {
        grid-template-rows: 3.75rem 1fr;
        flex-grow: 1;
        min-height: max-content;
    }

    @media (hover: hover) {
        @supports (color: oklch(0% 0 0)) {
            .btn-ghost.btn-primary:hover {
                background-color: var(--fallback-p,oklch(var(--p)/0.3));
            }
        }
    }

    @supports (color: oklch(0% 0 0)) {
        .btn-ghost.btn-primary {
            color: var(--fallback-p,oklch(var(--p)));
        }
    }

    @media (hover: hover) {
        @supports (color: oklch(0% 0 0)) {
            .btn-ghost.btn-secondary:hover {
                background-color: var(--fallback-s,oklch(var(--s)/0.3));
            }
        }
    }

    @supports (color: oklch(0% 0 0)) {
        .btn-ghost.btn-secondary {
            color: var(--fallback-s,oklch(var(--s)));
        }
    }

    @media (hover: hover) {
        @supports (color: oklch(0% 0 0)) {
            .btn-ghost.btn-error:hover {
                background-color: var(--fallback-s,oklch(var(--er)/0.3));
            }
        }
    }

    @supports (color: oklch(0% 0 0)) {
        .btn-ghost.btn-error {
            color: var(--fallback-s,oklch(var(--er)));
        }
    }

    @media (hover: hover) {
        @supports (color: oklch(0% 0 0)) {
            .btn-flat.btn-primary:hover {
                background-color: var(--fallback-p,oklch(var(--p)/0.75));
            }
        }
    }

    @supports (color: oklch(0% 0 0)) {
        .btn-flat.btn-primary {
            color: var(--fallback-pc,oklch(var(--pc)));
            background-color: var(--fallback-p,oklch(var(--p)/0.5));
            border: none;
        }
    }

    @media (hover: hover) {
        @supports (color: oklch(0% 0 0)) {
            .btn-flat.btn-secondary:hover {
                background-color: var(--fallback-s,oklch(var(--s)/0.75));
            }
        }
    }

    @supports (color: oklch(0% 0 0)) {
        .btn-flat.btn-secondary {
            color: var(--fallback-sc,oklch(var(--sc)));
            background-color: var(--fallback-s,oklch(var(--s)/0.5));
            border: none;
        }
    }

    @media (hover: hover) {
        @supports (color: oklch(0% 0 0)) {
            details[open] > .btn-flat.btn-secondary:hover {
                opacity: 0.9;
            }
        }
    }

    @supports (color: oklch(0% 0 0)) {
        details[open] > .btn-flat.btn-secondary {
            color: var(--fallback-sc,oklch(var(--sc)));
            background-color: var(--fallback-s,oklch(var(--s)/1));
            box-shadow: 0 0 0.5rem var(--fallback-s,oklch(var(--s)/0.5));
        }
    }

    @supports (color: oklch(0% 0 0)) {
        .slider {
            --track-color: var(--fallback-b2,oklch(var(--b2)/1)) !important;
        }

        .slider-secondary {
            color: var(--fallback-s,oklch(var(--s)/1));
        }

        .min-slider::-moz-range-progress {
            background: var(--fallback-b2,oklch(var(--b2)/1)) !important;
        }

        .switch-secondary {
            --color-off: var(--fallback-b2,oklch(var(--b2)/1)) !important;
            --color-on: var(--fallback-s,oklch(var(--s)/1)) !important;
            --handle-color: var(--fallback-sc,oklch(var(--sc)/1)) !important;
        }
    }

    .min-slider, .max-slider {
        position: absolute !important;
        @apply inset-0 pointer-events-none;
    }

    .max-slider {
        z-index: 0;
    }

    .min-slider {
        --track-color: rgba(0, 0, 0, 0) !important;
        z-index: 1;
    }

    .min-slider::-webkit-slider-thumb, .max-slider::-webkit-slider-thumb, .min-slider::-moz-range-thumb, .max-slider::-moz-range-thumb {
        z-index: 2;
        @apply: bg-secondary;
    }

    .min-slider:hover::-moz-range-progress, .min-slider:active::-moz-range-progress, .max-slider:hover::-moz-range-progress, .max-slider:active::-moz-range-progress {
        filter: none !important;
    }
}

@media (hover: hover) {
    @supports (color: oklch(0% 0 0)) {
        :where(.menu li:not(.menu-title, .disabled) > :not(ul, details, .menu-title)):not(.active, .btn):hover, :where(.menu li:not(.menu-title, .disabled) > details > summary:not(.menu-title)):not(.active, .btn):hover {
            background-color: var(--fallback-a,oklch(var(--a)/0.2));
        }
    }
}

details[open] summary svg.chevron {
    transform: rotate(180deg);
}

details ul {
    opacity: 0;
}

details[open] ul {
    opacity: 1;
}

.menu > li:has(input[type="checkbox"]:checked) > label, .menu > li:has(input[type="radio"]:checked) > label {
    @apply bg-base-300;
}

.menu > li:has(input[type="checkbox"]) > label > svg, .menu > li:has(input[type="radio"]) > label > svg {
    @apply opacity-0;
    @apply transition-opacity;
}

.menu > li:has(input[type="checkbox"]:checked) > label > svg, .menu > li:has(input[type="radio"]:checked) > label > svg {
    @apply opacity-100;
}

.tooltip:has(input[type="range"]) {
    --slider-progress: 0;
}

.tooltip:has(input[type="range"])::before, .tooltip:has(input[type="range"])::after {
    @apply absolute -translate-x-1/2;
    left: calc(var(--slider-progress) * (100% - 1.25rem) + 0.625rem);
}